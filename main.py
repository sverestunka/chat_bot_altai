import asyncio
import logging

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters.command import Command
from aiogram.filters import CommandObject
from aiogram.types.dice import DiceEmoji


from keyboards import kb1
from randomfox import fox

import config
API_TOKEN = config.token
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
logging.basicConfig(level=logging.INFO)
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot: Bot = Bot(token=API_TOKEN)
dp = Dispatcher()


@dp.message(F.text.lower() == "stop!")
async def with_puree(message: types.Message):
    await message.reply("–°—Ç–æ–ø –º–∞—à–∏–Ω–∞!!")
@dp.message(F.text.lower() == "start!")
async def without_puree(message: types.Message):
    await message.reply("–ü–æ–µ—Ö–∞–ª–∏!")
@dp.message(F.animation)
async def echo_gif(message: types.Message):
    await message.reply_animation(message.animation.file_id)

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer("–≠—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ë–æ—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.")

@dp.message(Command("info"))
async def cmd_info(message: types.Message):
    await message.answer("–Ø –±–æ—Ç, –º–æ–≥—É –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∑–∞ —Ç–æ–±–æ–π")

@dp.message(Command("fox"))
@dp.message(Command("–ª–∏—Å–∞"))
@dp.message(F.text.lower() == "–ø–æ–∫–∞–∂–∏ –ª–∏—Å—É")
async def cmd_fox(message: types.Message):
    name = message.chat.first_name
    img_fox = fox()
    await message.reply(f"–î–µ—Ä–∂–∏ –ª–∏—Å—É, {name}")
    # await message.answer_photo(photo=img_fox)
    await bot.send_photo(message.from_user.id, photo=img_fox)


@dp.message(F.text)
async def msg_echo(message: types.Message):
    print(message.text)
    name = message.chat.first_name
    if 'hello' in message.text.lower() or '–ø—Ä–∏–≤–µ—Ç' in message.text.lower() or 'hi' in message.text.lower() or '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ' in message.text.lower() or '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä' in message.text.lower() or '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å' in message.text.lower() or '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ' in message.text.lower() or '–¥–æ–±—Ä–æ–π –Ω–æ—á–∏' in message.text.lower():
        await message.reply(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}")
    elif 'by' in message.text.lower() or '–ø–æ–∫–∞' in message.text.lower():
        await message.reply(f"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {name}")
    elif '–∫–∞–∫ –¥–µ–ª–∞' in message.text.lower():
        # –≤—ã–∑—ã–≤–∞–µ—Ç —ç–º–æ–¥–∑–∏ –ø–æ –∫–æ–¥—É –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∏–∂–µ
        """text = "\U0001F601"
        await message.answer(text)"""
        # –≤—ã–∑—ã–≤–∞–µ—Ç random (–∏–≥—Ä–∞–ª—å–Ω—ã–π –∫—É–±–∏–∫)
        await message.answer_dice(emoji="üéØ")
    else:
        await message.answer(f'–¢—ã –Ω–∞–ø–∏—Å–∞–ª - {message.text}', reply_markup=kb1)
"""@dp.message()
async def echo(message: types.Message):
    await message.answer(message.text)"""

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
