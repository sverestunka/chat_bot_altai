from aiogram import Router, types, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from Chat_Bot_3.keyboards.tours import make_row_keyboard
from Chat_Bot_3.keyboards.keyboards import kb1


router = Router()

available_tours = [
    "–í–æ–¥–Ω—ã–µ —Ç—É—Ä—ã",
    "–ü–µ—à–∏–µ —Ç—É—Ä—ã",
    "–ö–æ–Ω–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏",
    "–ì–æ—Ä–Ω—ã–µ –ø–æ—Ö–æ–¥—ã"
]

available_kategory = ["–ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö", "–ü—Ä–∏—Ä–æ–¥–∞", "–ö—É–ª—å—Ç—É—Ä–∞ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏"]

class ChoiceProfile(StatesGroup):
    tour = State()
    kategory = State()

@router.message(Command("tours"))
async def command_tours(message: types.Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏ —Ç—É—Ä",
        reply_markup=make_row_keyboard(available_tours))
    await state.set_state(ChoiceProfile.tour)


@router.message(ChoiceProfile.tour, F.text.in_(available_tours))
async def tour_chosen(message: types.Message, state: FSMContext):
    await state.update_data(my_tour=message.text)
    lst = await state.get_data()
    if "–í–æ–¥–Ω—ã–µ —Ç—É—Ä—ã" == lst['my_tour']:
        await message.answer('–û–¢–õ–ò–ß–ù–û –ø–æ–ø–ª–∞–≤–∞–µ–º :)\n\n'
                             '* –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É\n\n'
                             '* –û–ø—ã—Ç–Ω—ã–µ –≥–∏–¥—ã —Å–æ –∑–Ω–∞–Ω–∏–µ–º –º–µ—Å—Ç–Ω–æ–π –ø—Ä–∏—Ä–æ–¥—ã –∏ –∫—É–ª—å—Ç—É—Ä—ã\n\n'
                             '* –ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ –≤ –ø–∞–ª–∞—Ç–∫–∞—Ö –∏–ª–∏ –≥–æ—Å—Ç–∏–Ω–∏—Ü–∞—Ö\n\n'
                             '* –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')

    elif "–ö–æ–Ω–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏" == lst['my_tour']:
        await message.answer('–õ–æ—à–∞–¥–∏ —É–∂–µ –∂–¥—É—Ç –í–∞—Å!\n\n'
                             '–ö–æ–Ω–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏ - —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥–æ–π –∏ –∑–∞—Ä—è–¥–∏—Ç—å—Å—è —ç–Ω–µ—Ä–≥–∏–µ–π.')
    elif "–ì–æ—Ä–Ω—ã–µ –ø–æ—Ö–æ–¥—ã" == lst['my_tour']:
        await message.answer('–•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä\n\n'
                             '–ù–∞—Å–ª–∞–¥–∏—Å—å –∫—Ä–∞—Å–æ—Ç–æ–π –∏ –≤–µ–ª–∏—á–∏–µ–º –ø–µ–π–∑–∞–∂–µ–π –ê–ª—Ç–∞—è: –≥–æ—Ä–∞ –ë–µ–ª—É—Ö–∞, –¢–µ–ª–µ—Ü–∫–æ–µ –æ–∑–µ—Ä–æ, –ß—É–π—Å–∫–∞—è —Å—Ç–µ–ø—å, –ú—É–ª—å—Ç–∏–Ω—Å–∫–∏–µ –æ–∑–µ—Ä–∞, —Ä–∞–π–æ–Ω—ã: –ì–æ—Ä–Ω—ã–π –ê–ª—Ç–∞–π, –ú–∞–π–º–∏–Ω—Å–∫–∏–π, –ß–µ–º–∞–ª—å—Å–∫–∏–π')
        await message.answer_dice(emoji="üéØ")

    """async def button_handler(message: types.Message):
        if button_handler == '–í–æ–¥–Ω—ã–µ —Ç—É—Ä—ã':
            await message.answer('–û–¢–õ–ò–ß–ù–û –ø–æ–ø–ª–∞–≤–∞–µ–º')
        elif message.text == '–ö–æ–Ω–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏':
            await message.answer('–õ–æ—à–∞–¥–∏ —É–∂–µ –∂–¥—É—Ç –í–∞—Å')
        elif message.text == '–ì–æ—Ä–Ω—ã–µ –ø–æ—Ö–æ–¥—ã':
            await message.answer('–•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä')
            await message.answer_dice(emoji="üéØ")
            # –≤—ã–∑—ã–≤–∞–µ—Ç —ç–º–æ–¥–∑–∏ –ø–æ –∫–æ–¥—É –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∏–∂–µ"""
        # text = "\U0001F601"
        # await message.answer(text)
        # –≤—ã–∑—ã–≤–∞–µ—Ç random (–∏–≥—Ä–∞–ª—å–Ω—ã–π –∫—É–±–∏–∫)


    await message.answer(
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ç–¥—ã—Ö–∞",
        reply_markup=make_row_keyboard(available_kategory))
    await state.set_state(ChoiceProfile.kategory)


@router.message(ChoiceProfile.tour)
async def tour_chosen_incorrect(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏ —Ç—É—Ä",
        reply_markup=make_row_keyboard(available_tours))


@router.message(ChoiceProfile.kategory, F.text.in_(available_kategory))
async def kategory_chosen(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await message.answer(f"–í–∞—à —Ç—É—Ä: {user_data['my_tour']}\n"
                         f"–í–∞—à–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {message.text}\n\n"
                         f"–£–¥–∞—á–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞!",
                         reply_markup=kb1)
    await state.clear()

@router.message(ChoiceProfile.kategory)
async def kategory_chosen_incorrect(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
        reply_markup=make_row_keyboard(available_kategory))